Metadata-Version: 2.4
Name: study-preprocessor
Version: 0.1.0
Summary: Kernel/system log preprocessing for DeepLog and MS-CRED
Author: Kaeul Kim
License-Expression: MIT
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: click>=8.2.1
Requires-Dist: drain3>=0.9.11
Requires-Dist: orjson>=3.11.3
Requires-Dist: pandas>=2.3.2
Requires-Dist: pyarrow>=21.0.0
Requires-Dist: regex>=2025.9.1
Requires-Dist: tqdm>=4.67.1

### PRD: 커널 로그 기반 전처리 파이프라인 (DeepLog/MS-CRED 연계)

#### 목적
- 커널/시스템 로그를 안정적으로 전처리하여 이상탐지용 시퀀스/피처를 생성한다.
- LSTM 기반 DeepLog 및 시계열 이미지화 기반 MS-CRED에 입력 가능한 형식으로 결과물을 제공한다.
- 빠른 반복과 재현성을 위해 `uv` 기반 파이썬 프로젝트로 구성한다.

#### 범위 (In-Scope)
- 커널/시스템 로그(dmesg, syslog 등) 전처리
- 템플릿 마이닝(Drain3) + 규칙 기반 마스킹(정규식)
- DeepLog용 토큰 시퀀스/윈도우 시퀀스 생성
- MS-CRED용 윈도우 단위 이벤트 카운트 벡터(1차 목표) 및 공발생(co-occurrence) 매트릭스(선택적)
- CLI 제공, 배치 처리, 대용량 스트리밍 처리

#### 비범위 (Out-of-Scope)
- 모델 학습/추론(DeepLog, MS-CRED) 자체 구현은 별도 레포/노트북에서 진행
- 분산 처리(예: Spark)는 초기 버전에서 제외

#### 이해관계자 / 사용자
- 데이터/ML 엔지니어: 파이프라인 실행, 아티팩트 소비
- 연구자: 전처리 결과를 DeepLog/MS-CRED 학습 입력으로 사용

---

### 요구사항

#### 입력
- 텍스트 로그 파일: 예) `data/raw/dmesg.sample.log`
- 포맷 가정: `[timestamp] [host?] [proc?] message` 형태가 섞여 있어도 라인 기반 처리 가능해야 함
- 타임존/포맷이 불명확한 경우에도 best-effort 파싱 후 미파싱 라인은 원문 보존

#### 전처리 규칙 (마스킹 + 템플릿)
- Drain3로 로그 템플릿 마이닝 및 안정적 템플릿 ID 부여
- 규칙 기반 마스킹(정규식):
  - 숫자: 정수/실수 `-?\d+(\.\d+)?`
  - 타임스탬프: ISO/rsyslog 일반 패턴
  - 주소: `0x[0-9a-fA-F]+`
  - PID/TID: `pid=\d+`, `tid=\d+`
  - IP: IPv4/IPv6
  - MAC: `([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}`
  - UUID: RFC4122 대략 패턴
  - 파일경로: `/[\w\.\-_/]+`
  - 디바이스명 숫자 접미: `eth\d+` → `eth<ID>` 등
- 마스킹 토큰 예시: `<NUM>`, `<HEX>`, `<IP>`, `<PID>`, `<PATH>` 등
- 템플릿과 변수 분리 저장: `template`, `parameters`

#### 산출물 (아티팩트)
- 파스드 테이블(parquet):
  - 컬럼: `timestamp`(nullable), `host`(nullable), `raw`, `masked`, `template_id`, `template`, `parameters`(JSON), `drain_cluster_id`
- DeepLog 입력:
  - `vocab.json`: `template_id` → 인덱스 매핑
  - `sequences.parquet`: 정렬된 `template_index` 시퀀스(옵션: 세션/호스트 단위)
  - `windows.parquet`: 슬라이딩 윈도우별 시퀀스, stride/window_size 설정
- MS-CRED 입력(1차):
  - `window_counts.parquet`: 윈도우 × 템플릿 카운트 벡터(행은 윈도우, 열은 템플릿)
  - 선택: `window_cooccurrence.parquet`: 템플릿 공발생 매트릭스(희소 표현)

#### 파이프라인 동작
- 스트리밍 파싱: 파일 라인 스트림 → 마스킹 → Drain3 업데이트/조회 → 로우 아웃풋 작성
- 메모리 효율: 청크/배치 처리, 파케이(Arrow) 저장, `orjson` 직렬화
- 성능 목표(초기): 1GB 로그 < 2분(로컬 M1/M2 기준, 최적화 전제)

#### CLI 사양
- 엔트리포인트: `study-preprocess`
- 주요 서브커맨드:
  - `parse`: 원시 로그 → 파스드 테이블 생성
    - 예: `study-preprocess parse --input data/raw/dmesg.sample.log --out-dir data/processed --drain-state .cache/drain3.pkl`
  - `build-deeplog`: 파스드 테이블 → DeepLog 입력(`vocab.json`, `sequences.parquet`, `windows.parquet`)
  - `build-mscred`: 파스드 테이블 → MS-CRED 입력(`window_counts.parquet`, 선택: `window_cooccurrence.parquet`)
- 공통 옵션: `--window-size`, `--stride`, `--time-col`, `--host-col`, `--min-count`

#### 디렉터리 구조(제안)
```
/Users/kaeulkim/dev/study_preprocessor/
  ├─ data/
  │   ├─ raw/                  # 예제 원시 로그
  │   └─ processed/            # 파스드/윈도우 산출물
  ├─ config/
  │   └─ drain3.yaml           # Drain3 파라미터(Depth, similarity 등)
  ├─ .cache/
  ├─ study_preprocessor/
  │   ├─ __init__.py
  │   ├─ cli.py                # click CLI
  │   ├─ preprocess.py         # 마스킹 + Drain3 래퍼
  │   ├─ builders/
  │   │   ├─ deeplog.py
  │   │   └─ mscred.py
  │   └─ utils/
  │       └─ io.py
  ├─ prd.md
  └─ tasklist.md
```

#### 의존성 및 툴링
- 패키지 매니저: `uv`
- 런타임: Python 3.11+
- 주요 라이브러리: `drain3`, `pandas`, `numpy`, `pyarrow`, `orjson`, `click`, `tqdm`, `regex`
- 품질: `ruff`(lint), `mypy`(선택)

#### 예제 데이터 및 샘플 결과
- 예제 원시 로그: `data/raw/dmesg.sample.log` (커널 메시지 수십~수백 라인)
- 실행 예:
```
uv run study-preprocess parse \
  --input data/raw/dmesg.sample.log \
  --out-dir data/processed
```
- 기대 산출물 미리보기: `data/processed/parsed.parquet`, `vocab.json`, `sequences.parquet`

#### 리스크/고려사항
- 로그 포맷 다양성: Drain3 파라미터 튜닝 필요
- 높은 카디널리티: 과도한 템플릿 증가 → 마스킹 규칙 강화/정규화 필요
- 타임스탬프 누락: 순서 보장 어려움 → 라인 인덱스 기반 보조 정렬

#### 마일스톤
- M1: 프로젝트 스캐폴딩(uv), 파서/마스킹, `parse` CLI, 예제 실행(샘플 포함)
- M2: DeepLog 빌더, 윈도우링, vocab/시퀀스 산출
- M3: MS-CRED 빌더(카운트 벡터), 선택적 공발생 매트릭스
- M4: 성능 튜닝 및 문서 보강

#### 수용 기준(Acceptance)
- 샘플 로그로 `parse` 실행 시 Parquet 산출 및 3개+ 마스킹 타입 확인 가능
- DeepLog 빌더로 시퀀스/윈도우 산출 확인
- MS-CRED 빌더로 카운트 벡터 산출 확인
